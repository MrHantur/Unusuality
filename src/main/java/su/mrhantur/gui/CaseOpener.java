package su.mrhantur.gui;

import org.bukkit.*;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.EnchantmentStorageMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.scheduler.BukkitRunnable;
import su.mrhantur.Unusuality;
import su.mrhantur.series.EnchantmentSeries;

import java.util.*;

import static java.lang.Math.max;

public class CaseOpener {
    private final Unusuality plugin;
    private final Map<UUID, Boolean> rollingPlayers = new HashMap<>();

    private int poolSize = 60;

    public CaseOpener(Unusuality plugin) {
        this.plugin = plugin;
    }

    public boolean isPlayerRolling(Player player) {
        return rollingPlayers.getOrDefault(player.getUniqueId(), false);
    }

    public void openCase(Player player, EnchantmentSeries series) {
        if (isPlayerRolling(player)) {
            player.sendMessage("¬ßc–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫—Ä—É—Ç–∫–∏.");
            return;
        }

        if (series == null) {
            player.sendMessage(ChatColor.RED + "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞
        boolean hasPhysicalKey = false;
        ItemStack physicalKey = null;
        for (ItemStack item : player.getInventory()) {
            if (plugin.getKeyConverter().isPhysicalKey(item)) {
                hasPhysicalKey = true;
                physicalKey = item;
                break;
            }
        }

        String playerName = player.getName().toLowerCase();
        int playerKeys = plugin.getDataManager().getKeys(playerName);
        double playerProgress = plugin.getDataManager().getProgress(playerName);
        double totalProgress = playerKeys + playerProgress;

        double cost = series.getCost();

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª—é—á –∏ –∫–µ–π—Å —Å—Ç–æ–∏—Ç 1 –∫–ª—é—á
        if (hasPhysicalKey && cost == 1) {
            // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª—é—á
            if (physicalKey.getAmount() > 1) {
                physicalKey.setAmount(physicalKey.getAmount() - 1);
            } else {
                player.getInventory().remove(physicalKey);
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª—é—á–µ–π
            if (totalProgress < cost) {
                player.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞!");
                player.sendMessage(ChatColor.GRAY + "–¢—Ä–µ–±—É–µ—Ç—Å—è: " + cost + " –∫–ª—é—á(–µ–π)");
                player.sendMessage(ChatColor.GRAY + "–£ –≤–∞—Å: " + String.format("%.2f", totalProgress) + " –∫–ª—é—á(–µ–π)");
                return;
            }
            plugin.getDataManager().removeProgress(playerName, cost);
        }

        rollingPlayers.put(player.getUniqueId(), true);

        boolean success = Math.random() * 100.0 < series.getBaseChance();
        ItemStack reward = success
                ? createUnusualBook(series.getRandomEnchantment())
                : createDummyBook();

        // –°–æ–∑–¥–∞–µ–º –ö–û–ü–ò–Æ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ)
        ItemStack animationReward = reward.clone();

        Inventory rollInv = Bukkit.createInventory(null, 27, "¬ß9–û—Ç–∫—Ä—ã–≤–∞–µ–º " + series.getDisplayName());
        player.openInventory(rollInv);

        ItemStack glass = createGlassPane();
        for (int i = 0; i < rollInv.getSize(); i++) {
            rollInv.setItem(i, glass);
        }

        List<ItemStack> pool = createAnimationPool(series);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø—É–ª –ö–û–ü–ò–Æ –±–µ–∑ –º–µ—Ç—ã –∏–≥—Ä–æ–∫–∞
        int rewardPosition = max(new Random().nextInt(poolSize - 10), 30);
        pool.set(rewardPosition, animationReward); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –¢–û–õ–¨–ö–û –∫ –≤—ã–¥–∞–≤–∞–µ–º–æ–π –Ω–∞–≥—Ä–∞–¥–µ
        ItemMeta rewardMeta = reward.getItemMeta();
        List<String> lore = rewardMeta.getLore() != null ?
                new ArrayList<>(rewardMeta.getLore()) :
                new ArrayList<>();

        lore.add("¬ß7–ü–æ–ª—É—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–º ¬ße" + player.getName());
        rewardMeta.setLore(lore);
        reward.setItemMeta(rewardMeta);

        // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É (—Å –º–µ—Ç–æ–π) –¥–ª—è –≤—ã–¥–∞—á–∏
        startCaseAnimation(player, rollInv, pool, rewardPosition, success, series, reward);
    }

    private ItemStack createGlassPane() {
        ItemStack glass = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta glassMeta = glass.getItemMeta();
        glassMeta.setDisplayName(" ");
        glass.setItemMeta(glassMeta);
        return glass;
    }

    private List<ItemStack> createAnimationPool(EnchantmentSeries series) {
        List<ItemStack> pool = new ArrayList<>();

        // Add enchantments from series (60%)
        for (int i = 0; i < poolSize * 0.6; i++) {
            Enchantment enchant = series.getRandomEnchantment();
            pool.add(createUnusualBook(enchant));
        }

        // Add dummy books (40%)
        for (int i = 0; i < poolSize * 0.4; i++) {
            pool.add(createDummyBook());
        }

        Collections.shuffle(pool);
        return pool;
    }

    private void startCaseAnimation(Player player, Inventory rollInv, List<ItemStack> pool,
                                    int rewardPosition, boolean success, EnchantmentSeries series, ItemStack reward) {
        final int maxTicks = 40;
        final int centerIndex = 4; // Center slot in the middle row (index 4 of 0-8)

        class AnimationTask extends BukkitRunnable {
            int ticks;
            int offset;
            long delay;

            AnimationTask(int ticks, int offset, long delay) {
                this.ticks = ticks;
                this.offset = offset;
                this.delay = delay;
            }

            @Override
            public void run() {
                if (!player.isOnline()) {
                    rollingPlayers.remove(player.getUniqueId());
                    cancel();
                    return;
                }

                // Display current items in the middle row
                for (int i = 0; i < 9; i++) {
                    int index = (offset + i) % poolSize;
                    rollInv.setItem(9 + i, pool.get(index));
                }

                // Indicators
                rollInv.setItem(4, createIndicator("¬ße‚ñº")); // Top indicator
                rollInv.setItem(22, createIndicator("¬ße‚ñ≤")); // Bottom indicator

                // Sound effect
                float pitch = 1.0f + (float) ticks * 0.02f;
                player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_HAT, 1.0f, pitch);

                // End of animation
                if (ticks > rewardPosition - 5) {
                    new BukkitRunnable() {
                        @Override
                        public void run() {
                            player.closeInventory();
                            handleCaseResult(player, success, reward, series);
                            rollingPlayers.remove(player.getUniqueId());
                        }
                    }.runTaskLater(plugin, 40L);

                    cancel();
                    return;
                }

                // Next animation frame
                ticks++;
                offset++;
                long newDelay = 2L + (long) ((8.0 * ticks) / maxTicks);
                new AnimationTask(ticks, offset, newDelay).runTaskLater(plugin, newDelay);
                cancel();
            }
        }

        new AnimationTask(0, 0, 0).runTask(plugin);
    }

    private void handleCaseResult(Player player, boolean success, ItemStack reward, EnchantmentSeries series) {
        if (success) {
            // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            Map<Integer, ItemStack> leftover = player.getInventory().addItem(reward);

            // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é - –¥—Ä–æ–ø–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            if (!leftover.isEmpty()) {
                for (ItemStack item : leftover.values()) {
                    player.getWorld().dropItem(player.getLocation(), item);
                }
                player.sendMessage("¬ße–ü—Ä–µ–¥–º–µ—Ç—ã —É–ø–∞–ª–∏ –Ω–∞ –∑–µ–º–ª—é, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!");
            }

            player.sendMessage("¬ßd‚ú® –£–¥–∞—á–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–µ—Ä–∏–∏ " + series.getDisplayName() + "!");
            player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);
            player.spawnParticle(Particle.TOTEM_OF_UNDYING, player.getLocation().add(0, 1, 0), 50, 0.6, 1.0, 0.6, 0.2);
        } else {
            player.sendMessage("¬ßcüíÄ –ù–µ—É–¥–∞—á–∞! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ");
            player.playSound(player.getLocation(), Sound.BLOCK_ANVIL_LAND, 0.8f, 0.8f);
            player.spawnParticle(Particle.CAMPFIRE_SIGNAL_SMOKE, player.getLocation().add(0, 1, 0), 20, 0.5, 0.5, 0.5, 0.05);
        }
    }

    private ItemStack createDummyBook() {
        ItemStack book = new ItemStack(Material.BOOK);
        ItemMeta meta = book.getItemMeta();
        meta.setDisplayName("¬ß7–û–±—ã—á–Ω–∞—è –∫–Ω–∏–≥–∞");
        meta.setLore(List.of("¬ß7–ù–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ..."));
        book.setItemMeta(meta);
        return book;
    }

    private ItemStack createUnusualBook(Enchantment enchantment) {
        if (enchantment == null) return createDummyBook();

        ItemStack book = new ItemStack(Material.ENCHANTED_BOOK);
        EnchantmentStorageMeta meta = (EnchantmentStorageMeta) book.getItemMeta();
        meta.addStoredEnchant(enchantment, 1, true);
        book.setItemMeta(meta);
        return book;
    }

    private ItemStack createIndicator(String symbol) {
        ItemStack item = new ItemStack(Material.CHAIN);
        ItemMeta meta = item.getItemMeta();
        meta.setDisplayName(symbol);
        item.setItemMeta(meta);
        return item;
    }

    public int getPoolSize() {
        return poolSize;
    }

    public void setPoolSize(int poolSize) {
        this.poolSize = poolSize;
    }
}